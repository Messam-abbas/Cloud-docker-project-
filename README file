

Student Portal

Overview

The Student Portal is a microservices-based project designed to manage student operations, course enrollments, and grades. Each service operates independently but communicates through APIs to provide a seamless user experience.

Microservices
Student Service
Manages student information such as name, email, and ID.
Allows adding, updating, and retrieving student details.
Course Service
Manages course information including course names, codes, and descriptions.
Enables adding, updating, and retrieving course data.
Grades Service
Handles student grades for different courses.
Supports adding, updating, and fetching grade details.
Project Structure

student-portal/
├── student-service/
│   ├── app.py
│   ├── requirements.txt
│   └── Dockerfile
├── course-service/
│   ├── app.py
│   ├── requirements.txt
│   └── Dockerfile
├── grades-service/
│   ├── app.py
│   ├── requirements.txt
│   └── Dockerfile
├── docker-compose.yml
└── README.md
Technologies Used

Python (Flask)
Docker
Docker Compose
JSON for data communication
Setup and Run

Prerequisites
Install Docker: Get Docker
Install Docker Compose: Docker Compose Installation
Steps to Run the Project
Clone the repository:
git clone <repository-link>  
cd student-portal  
Build the services:
docker-compose build  
Start the services:
docker-compose up  
Access the services:
Student Service: http://localhost:5001
Course Service: http://localhost:5002
Grades Service: http://localhost:5003
Stopping the Services
To stop the services, use:

docker-compose down  
API Endpoints

Student Service
GET /students: Retrieve all students
POST /students: Add a new student
Course Service
GET /courses: Retrieve all courses
POST /courses: Add a new course
Grades Service
GET /grades: Retrieve all grades
POST /grades: Add a new grade
Example API Request

To add a student via the Student Service:

curl -X POST http://localhost:5001/students -H "Content-Type: application/json" -d '{"name": "John Doe", "email": "john@example.com"}'  
Future Enhancements

Implement user authentication.
Add a frontend for better user interaction.
Integrate a database for persistent storage.
This README file provides a concise yet detailed overview of the Student Portal project, making it easier for others to understand and run the application.
